%   CLASS GUI_Inspector
% =========================================================================
%
% DESCRIPTION
%   class to manage the inspector window of goGPS
%
% EXAMPLE
%   ui = GUI_Inspector.getInstance();
%
% FOR A LIST OF CONSTANTs and METHODS use doc Core_UI


%--------------------------------------------------------------------------
%               ___ ___ ___
%     __ _ ___ / __| _ | __|
%    / _` / _ \ (_ |  _|__ \
%    \__, \___/\___|_| |___/
%    |___/                    v 1.0b8
%
%--------------------------------------------------------------------------
%  Copyright (C) 2009-2019 Mirko Reguzzoni, Eugenio Realini
%  Written by:       Andrea Gatti
%  Contributors:     Andrea Gatti, ...
%  A list of all the historical goGPS contributors is in CREDITS.nfo
%--------------------------------------------------------------------------
%
%    This program is free software: you can redistribute it and/or modify
%    it under the terms of the GNU General Public License as published by
%    the Free Software Foundation, either version 3 of the License, or
%    (at your option) any later version.
%
%    This program is distributed in the hope that it will be useful,
%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%    GNU General Public License for more details.
%
%    You should have received a copy of the GNU General Public License
%    along with this program.  If not, see <http://www.gnu.org/licenses/>.
%
%--------------------------------------------------------------------------
% 01100111 01101111 01000111 01010000 01010011
%--------------------------------------------------------------------------

classdef GUI_Inspector < GUI_Unique_Win   
    properties (Constant)
        WIN_NAME = 'goGPS_Inspector_Win';
    end
    
    properties (Constant, Access = 'protected')
        BG_COLOR = Core_UI.DARK_GREY_BG;
        RES_SOURCE = {'Last-session (work-space)', 'Stored outputs'}
        RES_TYPE = {'Pseudo-ranges', 'Carrier Phases'}
        COO_TYPE = {'External ".coo" file', 'Per session coordinates', 'Additional coordinates 1', 'Additional coordinates 2', 'Additional coordinates 3'}
    end
    
    %% PROPERTIES GUI
    % ==================================================================================================================================================
    properties
        win         % Handle to this window
        rec_tbl     % Handle to the table with all the receivers
        j_cmd       % Handle to the j_cmd java component
        top_bh      % Handle to the top box (useful to hide the loading spinner)
        j_spinner   % Handle to busy java spinner
        
        res_source  % Handle to pop up menu for residuals resources
        res_type    % Handle to pop up menu for residuals type
        coo_type    % Handle to pop up menu for coordinates type
        bsl_type    % Handle to pop up menu for bsl type (same as coordinates)
        mp_type     % Handle to pop up menu for multipath type
        
        bsl_ref_ids % Handle to edit box for defining reference receivers
        
        
        edit_texts = {} % Handle to all the edit boxes
        flag_list = {}  % Handle to all the FLAGS
        
        flag_auto_exec      % Handle to automatic exec flag
        flag_auto_export    % Handle to automatic exeport flag
        flag_auto_close     % Handle to automatic close flag    
    end    
    
    %% PROPERTIES STATUS
    % ==================================================================================================================================================
    properties (GetAccess = private, SetAccess = private)
    end
    
    %% METHOD CREATOR
    % ==================================================================================================================================================
    methods  (Static, Access = private)
        function this = GUI_Inspector()
            % GUI_Inspector object creator
            this.openGUI();
            this.init();
        end
    end         
    
    methods (Static, Access = public)
        function this = getInstance()
            % Get the persistent instance of the class
            persistent unique_instance_GUI_Inspector__
            
            if isempty(unique_instance_GUI_Inspector__) || ~ishandle(unique_instance_GUI_Inspector__.win)
                this = GUI_Inspector();
                unique_instance_GUI_Inspector__ = this;
            else
                this = unique_instance_GUI_Inspector__;
                this.getUniqueWinHandle();
                this.init();
            end
            this.bringOnTop;
        end
    end
    
    %% METHODS INIT
    % ==================================================================================================================================================
    methods
        function init(this)
            this.updateRecList();
            this.updateUI();
        end
        
        function openGUI(this)
            % Main Window ---------------------------------------------------------------------------------------------
            
            % If there is still an old logging wondow still open, close it
            old_win = this.getUniqueWinHandle();
            if ~isempty(old_win)
                delete(old_win); 
            end
            
            old_win = this.getUniqueWinHandle();
            if ~isempty(old_win)
                log = Core.getLogger();
                log.addMarkedMessage('Resetting the old Inspector window');
                win = old_win;
                
                if strcmp(this.win.Visible, 'off')
                    if isunix && not(ismac())
                        win.Position(1) = round((win.Parent.ScreenSize(3) - win.Position(3)) / 2);
                        win.Position(2) = round((win.Parent.ScreenSize(4) - win.Position(4)) / 2);
                    else
                        win.OuterPosition(1) = round((win.Parent.ScreenSize(3) - win.OuterPosition(3)) / 2);
                        win.OuterPosition(2) = round((win.Parent.ScreenSize(4) - win.OuterPosition(4)) / 2);
                    end
                end
                this.win = win;               
            else
                
                win = figure( 'Name', 'goGPS inspector', ...
                    'Visible', 'off', ...
                    'DockControls', 'off', ...
                    'MenuBar', 'none', ...
                    'ToolBar', 'none', ...
                    'NumberTitle', 'off', ...
                    'Position', [0 0 1040, 640], ...
                    'Resize', 'on');
                win.UserData.name = this.WIN_NAME;
                
                this.win = win;
                
                if isunix && not(ismac())
                    % win.Position(1) = round((win.Parent.ScreenSize(3) - win.Position(3)));
                    % win.Position(2) = round((win.Parent.ScreenSize(4) - win.Position(4)));
                    % centered
                    win.Position(1) = round((win.Parent.ScreenSize(3) - win.Position(3)) / 2);
                    win.Position(2) = round((win.Parent.ScreenSize(4) - win.Position(4)) / 2);
                else
                    % top right
                    % win.OuterPosition(1) = round((win.Parent.ScreenSize(3) - win.OuterPosition(3)));
                    % win.OuterPosition(2) = round((win.Parent.ScreenSize(4) - win.OuterPosition(4)));
                    % centered
                    win.OuterPosition(1) = round((win.Parent.ScreenSize(3) - win.OuterPosition(3)) / 2);
                    win.OuterPosition(2) = round((win.Parent.ScreenSize(4) - win.OuterPosition(4)) / 2);
                end
                
                try
                    main_vb = uix.VBox('Parent', win, ...
                        'Padding', 5, ...
                        'BackgroundColor', Core_UI.DARKER_GREY_BG);
                catch
                    log = Core.getLogger;
                    log.addError('Please install GUI Layout Toolbox (https://it.mathworks.com/matlabcentral/fileexchange/47982-gui-layout-toolbox)');
                    open('GUI Layout Toolbox 2.3.4.mltbx');
                    log.newLine();
                    log.addWarning('After installation re-run goGPS');
                    close(win);
                    return;
                end
                top_bh = uix.HBox('Parent', main_vb);
                
                logo_GUI_Inspector.BG_COLOR = Core_UI.DARK_GREY_BG;
                left_tbv = uix.VBox('Parent', top_bh, ...
                    'BackgroundColor', logo_GUI_Inspector.BG_COLOR, ...
                    'Padding', 5);
                
                % Logo/title box ------------------------------------------------------------------------------------------
                
                logo_g = uix.Grid('Parent', left_tbv, ...
                    'Padding', 5, ...
                    'BackgroundColor', logo_GUI_Inspector.BG_COLOR);
                
                logo_ax = axes( 'Parent', logo_g);
                logo_g.Widths = 64;
                logo_g.Heights = 64;
                [logo, transparency] = Core_UI.getLogo();
                logo(repmat(sum(logo,3) == 0,1,1,3)) = 0;
                logo = logo - 20;
                image(logo_ax, ones(size(logo)), 'AlphaData', transparency);
                logo_ax.XTickLabel = [];
                logo_ax.YTickLabel = [];
                axis off;
                
                Core_UI.insertEmpty(left_tbv, logo_GUI_Inspector.BG_COLOR);
                left_tbv.Heights = [82 -1];
                
                right_tvb = uix.VBox('Parent', top_bh, ...
                    'Padding', 5, ...
                    'BackgroundColor', logo_GUI_Inspector.BG_COLOR);
                
                % Spinner Panel -------------------------------------------------------------------------------------------
                
                spinner_box = uix.VBox('Parent', top_bh, ...
                    'Padding', 5, ...
                    'BackgroundColor', logo_GUI_Inspector.BG_COLOR);
                spinner_container = uix.VBox('Parent', spinner_box, ...
                    'BackgroundColor', Core_UI.DARKER_GREY_BG);
                this.j_spinner = this.insertWaitSpinner(spinner_container);
                Core_UI.insertEmpty(spinner_box, Core_UI.DARKER_GREY_BG)
                spinner_box.Heights = [-1 20];
                
                % Useful Buttons ------------------------------------------------------------------------------------------
                
                list_but = uix.VButtonBox( 'Parent', top_bh, ...
                    'ButtonSize', [100 28] , ...
                    'VerticalAlignment', 'top', ...
                    'HorizontalAlignment', 'right', ...
                    'BackgroundColor', Core_UI.DARK_GREY_BG);
                
                load_core_but = uicontrol( 'Parent', list_but, ...
                    'String', 'Load Core', ...
                    'Callback', @this.onLoadCore); %#ok<NASGU>
                
                goGPS_but = uicontrol( 'Parent', list_but, ...
                    'String', 'Show Settings', ...
                    'Callback', @this.onEditSettings); %#ok<NASGU>
                
                goGPS_but = uicontrol( 'Parent', list_but, ...
                    'String', 'Reopen goGPS', ...
                    'Callback', @this.onRunGoGPS); %#ok<NASGU>
                
                top_bh.Widths = [106 -1 0 120];
                this.top_bh = top_bh;
                
                title = uix.HBox('Parent', right_tvb, ...
                    'BackgroundColor', logo_GUI_Inspector.BG_COLOR);
                
                % Title Panel ---------------------------------------------------------------------------------------------
                txt = this.insertBoldText(title, 'goGPS', 12, Core_UI.LBLUE, 'left');
                txt.BackgroundColor = logo_GUI_Inspector.BG_COLOR;
                title_l = uix.VBox('Parent', title, 'BackgroundColor', GUI_Inspector.BG_COLOR);
                title.Widths = [60 -1];
                Core_UI.insertEmpty(title_l, logo_GUI_Inspector.BG_COLOR)
                txt = this.insertBoldText(title_l, ['- software V' Core.GO_GPS_VERSION], 9, [], 'left');
                txt.BackgroundColor = logo_GUI_Inspector.BG_COLOR;
                title_l.Heights = [2, -1];
                
                % Top Panel -----------------------------------------------------------------------------------------------
                
                Core_UI.insertEmpty(right_tvb, logo_GUI_Inspector.BG_COLOR)
                txt = this.insertText(right_tvb, {'A GNSS processing software powered by GReD'}, 9, [], 'left');
                txt.BackgroundColor = logo_GUI_Inspector.BG_COLOR;
                txt = this.insertText(right_tvb, {'Remark: Some plots or exports might be unavailable if the data they require is not computed'}, 9, [], 'left');
                txt.BackgroundColor = logo_GUI_Inspector.BG_COLOR;
                txt.FontSize = txt.FontSize * 0.9;
                txt.ForegroundColor = Core_UI.ORANGE;
                right_tvb.Heights = [25 3 28 -1];
                
                Core_UI.insertEmpty(main_vb, Core_UI.DARKER_GREY_BG)
                
                % Main Panel ----------------------------------------------------------------------------------------------
                
                main_hb = uix.HBox('Parent', main_vb, ...
                    'Padding', 5, ...
                    'BackgroundColor', Core_UI.DARK_GREY_BG);
                
                % Bottom Panel --------------------------------------------------------------------------------------------
                
                Core_UI.insertEmpty(main_vb, Core_UI.DARKER_GREY_BG)
                bottom = uix.HBox('Parent', main_vb, ...
                    'Padding', 5, ...
                    'BackgroundColor', Core_UI.DARK_GREY_BG);
                [grp, this.edit_texts{end + 1}, this.flag_list{end + 1}] = Core_UI.insertDirBox(bottom, 'Out directory', 'out_dir', @this.onEditChange, [25 100 -1 25]);
                grp.BackgroundColor = Core_UI.DARK_GREY_BG;
                grp.Children(3).BackgroundColor = Core_UI.DARK_GREY_BG;
                grp.Children(3).ForegroundColor = [1 1 1];
                
                main_vb.Heights = [84 5 -1 5 35];
                
                % Middle Tab Panel ----------------------------------------------------------------------------------------
                
                this.insertRecList(main_hb);
                Core_UI.insertEmpty(main_hb, Core_UI.DARK_GREY_BG)
                tab_pnl_left = uix.TabPanel('Parent', main_hb, ...
                    'TabWidth', 60, ...
                    'Padding', 5, ...
                    'BackgroundColor', Core_UI.LIGHT_GREY_BG, ...
                    'SelectionChangedFcn', @this.onTabChange);
                
                this.insertTabPlots1(tab_pnl_left);
                this.insertTabPlots2(tab_pnl_left);
                this.insertTabPlots3(tab_pnl_left);
                this.insertTabMaps(tab_pnl_left);
                this.insertTabExport(tab_pnl_left);
                
                tab_pnl_left.TabTitles = {'Plots 1', 'Plots 2', 'Plots 3', 'Maps', 'Export'};
                
                % Right Panel ---------------------------------------------------------------------------------------------
                
                Core_UI.insertEmpty(main_hb, Core_UI.DARK_GREY_BG);
                
                tab_pnl_right = uix.TabPanel('Parent', main_hb, ...
                    'TabWidth', 90, ...
                    'Padding', 5, ...
                    'BackgroundColor', Core_UI.LIGHT_GREY_BG, ...
                    'SelectionChangedFcn', @this.onTabChange);
                
                this.j_cmd = this.insertCommandEditor(tab_pnl_right);
                
                tab_pnl_right.TabTitles = {'Commands'};
                
                main_hb.Widths = [190 5 360 5 -1];
                
                % Manage dimension ----------------------------------------------------------------------------------------
            end
            this.win.Visible = 'on';    
        end
        
        function close(this)
            if ~isempty(this.win) && ishandle(this.win)
                close(this.win);
            end
        end
    end
    
    %% METHODS INSERT
    % ==================================================================================================================================================
    methods (Static)
        function txt = insertBoldText(parent, title, font_size, color, alignment)
            if nargin < 4 || isempty(color)
                color = Core_UI.WHITE;
            end
            if nargin < 5 || isempty(alignment)
                alignment = 'center';
            end
            txt = uicontrol('Parent', parent, ...
                'Style', 'Text', ...
                'String', title, ...
                'ForegroundColor', color, ...
                'HorizontalAlignment', alignment, ...
                'FontSize', Core_UI.getFontSize(font_size), ...
                'FontWeight', 'bold', ...
                'BackgroundColor', GUI_Inspector.BG_COLOR);
        end

        function txt = insertText(parent, title, font_size, color, alignment)
            if nargin < 4 || isempty(color)
                color = Core_UI.WHITE;
            end
            if nargin < 5 || isempty(alignment)
                alignment = 'center';
            end
            txt = uicontrol('Parent', parent, ...
                'Style', 'Text', ...
                'String', title, ...
                'ForegroundColor', color, ...
                'HorizontalAlignment', alignment, ...
                'FontSize', Core_UI.getFontSize(font_size), ...
                'BackgroundColor', GUI_Inspector.BG_COLOR);
        end
        
        function j_obj = insertWaitSpinner(container)
            % Insert a wait spinner
            
            % Thanks to undocumented MATLAB blog
            iconsClassName = 'com.mathworks.widgets.BusyAffordance$AffordanceSize';
            iconsSizeEnums = javaMethod('values',iconsClassName);
            SIZE_32x32 = iconsSizeEnums(2);  % (1) = 16x16,  (2) = 32x32
            j_obj = com.mathworks.widgets.BusyAffordance(SIZE_32x32, 'Loading...');  % icon, label
            
            j_obj.setPaintsWhenStopped(true);  % default = false
            j_obj.useWhiteDots(true);         % default = false (true is good for dark backgrounds)
            % DEPRECATE!!!
            warning off
            tmp = javacomponent(j_obj.getComponent, [0,0,80,100], container);
            warning on
            tmp.setBackground(java.awt.Color(Core_UI.DARKER_GREY_BG(1),Core_UI.DARKER_GREY_BG(2),Core_UI.DARKER_GREY_BG(3)));
        end
    end
    
    methods (Access = 'private')
        function insertRecList(this, container)
            lv_box = uix.VBox('Parent', container, ...
                'Padding', 0, ...
                'BackgroundColor', Core_UI.DARK_GREY_BG);            
            tv_text = uix.VBox( 'Parent', lv_box, ...
                'Padding', 0, ...
                'BackgroundColor', Core_UI.DARK_GREY_BG);
            
            list_title = uicontrol('Parent', tv_text, ...
                'Style', 'Text', ...
                'String', 'Receiver List', ...
                'ForegroundColor', Core_UI.WHITE, ...
                'HorizontalAlignment', 'left', ...
                'FontSize', Core_UI.getFontSize(9), ...
                'FontWeight', 'bold', ...
                'BackgroundColor', Core_UI.DARK_GREY_BG);
            
            list_but = uix.HButtonBox( 'Parent', tv_text, ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'BackgroundColor', Core_UI.DARK_GREY_BG);
                        
            select_but = uicontrol( 'Parent', list_but, ...
                'String', 'Select All', ...
                'Callback', @this.onSelectAll); %#ok<NASGU>
            clear_but = uicontrol( 'Parent', list_but, ...
                'String', 'Clear All', ...
                'Callback', @this.onUnselectAll); %#ok<NASGU>           
            update_rec_but = uicontrol( 'Parent', list_but, ...
                'String', 'Refresh', ...
                'TooltipString', 'Update receiver list', ...
                'Callback', @this.onUpdateRecList);
            
            tv_text.Heights = [20 25];                        
            
            rec_g = uix.Grid('Parent', lv_box, ...
                'Padding', 0, ...
                'BackgroundColor', Core_UI.DARK_GREY_BG);
            
            this.rec_tbl = uitable('Parent', rec_g);
            this.rec_tbl.RowName = {}; 
            this.rec_tbl.ColumnName = {''; 'N'; 'Name'; 'SYS'};
            colTypes = {'logical', 'char', 'char', 'char'};
            this.rec_tbl.ColumnFormat = colTypes;
            this.rec_tbl.ColumnEditable = [true false false false];
            this.rec_tbl.ColumnWidth = {20, 45, 60, 46};        
            lv_box.Heights = [50 -1]; 
        end

        function insertTabPlots1(this, container)
            cmd_bg = Core_UI.LIGHT_GREY_BG;
            tab = uix.HBox('Parent', container, ...
                'Padding', 0, ...
                'BackgroundColor', cmd_bg);
             
            v_left = uix.VBox('Parent', tab, ...
                'Padding', 0, ...
                'BackgroundColor', cmd_bg);
            
            % --------------------------------------------------------
            % COMMAND SUGGESTIOS
            % --------------------------------------------------------
            eg_box = uix.VBox('Parent', v_left);
                        
            % uicontrol('Parent', eg_box, ...
            %     'Style', 'Text', ...
            %     'String', 'Execution examples:', ...
            %     'ForegroundColor', Core_UI.BLACK, ...
            %     'HorizontalAlignment', 'left', ...
            %     'FontSize', Core_UI.getFontSize(9), ...
            %     'BackgroundColor', cmd_bg);            
                        
            Core_UI.insertEmpty(eg_box);
            
            % Work-Space
            % --------------------------------------------------------
            last_sss_pnl = Core_UI.insertPanelLight(eg_box, 'Plots of the last computed session (Work-Space)');
            workspace_box = uix.VButtonBox('Parent', last_sss_pnl, ...
                'ButtonSize', [340 28] , ...
                'Spacing', 0, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            but_line = uix.HButtonBox('Parent', workspace_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'Data Availability', ...
                'TooltipString', 'Data Availability per system', ...
                'UserData', {'SHOW T@ DA'}, ...
                'Callback', @this.onInsertCommand);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'Observation Stats', ...
                'TooltipString', 'Some statistics on the observations', ...
                'UserData', {'SHOW T@ OBS_STAT'}, ...
                'Callback', @this.onInsertCommand);
            
            but_line = uix.HButtonBox('Parent', workspace_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);

            uicontrol( 'Parent', but_line, ...
                'String', 'SNR (polar)', ...
                'TooltipString', 'Sigma to Noise Ration Polar scatter (per tracking)', ...
                'UserData', {'SHOW T@ SNR'}, ...
                'Callback', @this.onInsertCommand);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'SNR (polar - interpolated)', ...
                'TooltipString', 'Maps derived from the Signal to Noise ratio (per tracking)', ...
                'UserData', {'SHOW T@ SNRI'}, ...
                'Callback', @this.onInsertCommand);
            
            but_line = uix.HButtonBox('Parent', workspace_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'Clock Errors', ...
                'TooltipString', 'Estimated clock errors in the various processing steps', ...
                'UserData', {'SHOW T@ CKW'}, ...
                'Callback', @this.onInsertCommand);
           
            but_line = uix.HButtonBox('Parent', workspace_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
           
            uicontrol( 'Parent', but_line, ...
                'String', 'Outliers and CS', ...
                'TooltipString', 'Outliers and Cycle Slips on a cartesian plot', ...
                'UserData', {'SHOW T@ OCS'}, ...
                'Callback', @this.onInsertCommand);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'Outliers and CS (polar)', ...
                'TooltipString', 'Outliers and Cycle Slips on a polar plot', ...
                'UserData', {'SHOW T@ OCSP'}, ...
                'Callback', @this.onInsertCommand);
                        
            % --------------------------------------------------------
            
            Core_UI.insertEmpty(eg_box);
            
            % Output
            % --------------------------------------------------------
            
            out_pnl = Core_UI.insertPanelLight(eg_box, 'Plots of the stored outputs');
            out_box = uix.VButtonBox('Parent', out_pnl, ...
                'ButtonSize', [340 28] , ...
                'Spacing', 0, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            but_line = uix.HButtonBox('Parent', out_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'Clock Errors', ...
                'TooltipString', 'Estimated clock errors', ...
                'UserData', {'SHOW T@ CK'}, ...
                'Callback', @this.onInsertCommand);

            uicontrol( 'Parent', but_line, ...
                'String', 'Processing Stats', ...
                'TooltipString', 'Processing Statistics (multi-session only)', ...
                'UserData', {'SHOW T@ PSTAT'}, ...
                'Callback', @this.onInsertCommand);           
            
            but_line = uix.HButtonBox('Parent', out_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);

            uicontrol( 'Parent', but_line, ...
                'String', 'N. Satellites per System (smooth)', ...
                'TooltipString', 'Smoothed Number of Satellites per System (one receiver at a time)', ...
                'UserData', {'SHOW T@ NSATSSS'}, ...
                'Callback', @this.onInsertCommand);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'N. Satellites per System', ...
                'TooltipString', 'Number of Satellites per System (one receiver at a time)', ...
                'UserData', {'SHOW T@ NSATSS'}, ...
                'Callback', @this.onInsertCommand);

            but_line = uix.VButtonBox('Parent', out_box, ...
                'ButtonSize', [340 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            v_but = uix.VBox('Parent', but_line, ...
                'Padding', 0, ...
                'BackgroundColor', cmd_bg);
            Core_UI.insertEmpty(v_but);
            h_but = uix.HBox('Parent', v_but, ...
                'Padding', 0, ...
                'BackgroundColor', cmd_bg);
            Core_UI.insertEmpty(h_but);
            [~, this.coo_type] = Core_UI.insertPopUpLight(h_but, 'Coordinates type', this.COO_TYPE, 'coo_type', [], [120 -1]);
            this.coo_type.Value = 2;
            h_but.Widths = [5 -1];
            v_but.Heights = [4 -1];
                        
            but_line = uix.HButtonBox('Parent', out_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'Pos. Stability ENU', ...
                'TooltipString', 'Estimated position stability ENU (requires more than 1 pos)', ...
                'UserData', {'SHOW T@ ENU --ctype=(CTYPE)'}, ...
                'Callback', @this.onInsertCommand);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'Pos. Stability XYZ', ...
                'TooltipString', 'Estimated position stability XYZ (requires more than 1 pos)', ...
                'UserData', {'SHOW T@ XYZ --ctype=(CTYPE)'}, ...
                'Callback', @this.onInsertCommand);
            
            but_line = uix.HButtonBox('Parent', out_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'Pos. Stability Planar Up', ...
                'TooltipString', 'Estimated position Stability Planar Up (requires more than 1 pos)', ...
                'UserData', {'SHOW T@ PUP --ctype=(CTYPE)'}, ...
                'Callback', @this.onInsertCommand);
            
            Core_UI.insertEmpty(eg_box);
            
            % Work-Space
            % --------------------------------------------------------
            last_sss_pnl = Core_UI.insertPanelLight(eg_box, 'Misc');
            workspace_box = uix.VButtonBox('Parent', last_sss_pnl, ...
                'ButtonSize', [340 28] , ...
                'Spacing', 0, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            but_line = uix.HButtonBox('Parent', workspace_box, ...
                'ButtonSize', [340 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'Show Available orbits (all sessions)', ...
                'TooltipString', 'Available orbits for all the sessions', ...
                'UserData', {'SHOW ALLORBOK'}, ...
                'Callback', @this.onInsertCommand);
            
            but_line = uix.HButtonBox('Parent', workspace_box, ...
                'ButtonSize', [340 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'Show Available orbits (cur. session)', ...
                'TooltipString', 'Available orbits for all the sessions', ...
                'UserData', {'SHOW ORBOK'}, ...
                'Callback', @this.onInsertCommand);
            
            Core_UI.insertEmpty(eg_box);
            
            % --------------------------------------------------------
            
            %scroller = uix.ScrollingPanel('Parent', eg_box);
            %container = uix.Grid('Parent', scroller, ...
            %    'BackgroundColor', Core_UI.LIGHT_GREY_BG);

            eg_box.Heights = [5, 140, 5, 168, 5, 140, -1];
        end

        function insertTabPlots2(this, container)
            cmd_bg = Core_UI.LIGHT_GREY_BG;
            tab = uix.HBox('Parent', container, ...
                'Padding', 0, ...
                'BackgroundColor', cmd_bg);
             
            v_left = uix.VBox('Parent', tab, ...
                'Padding', 0, ...
                'BackgroundColor', cmd_bg);
            
            % --------------------------------------------------------
            % COMMAND SUGGESTIOS
            % --------------------------------------------------------
            eg_box = uix.VBox('Parent', v_left);
                        
            Core_UI.insertEmpty(eg_box);
 
            % Output Multi-rec
            % --------------------------------------------------------
            out_pnl = Core_UI.insertPanelLight(eg_box, 'Plots of the stored outputs (multi-rec)');
            out_box = uix.VButtonBox('Parent', out_pnl, ...
                'ButtonSize', [340 28] , ...
                'Spacing', 0, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            but_line = uix.HButtonBox('Parent', out_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'N. Satellites', ...
                'TooltipString', 'Number of Satellites currently used (all the receiver at once)', ...
                'UserData', {'SHOW T@ NSAT'}, ...
                'Callback', @this.onInsertCommand);
            
            but_line = uix.HButtonBox('Parent', out_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'ZTD', ...
                'TooltipString', 'Estimated Zenith Total Delay (ZTD)', ...
                'UserData', {'SHOW T@ ZTD'}, ...
                'Callback', @this.onInsertCommand);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'ZHD', ...
                'TooltipString', 'Estimated Zenith Hydrostatic Delay (ZHD)', ...
                'UserData', {'SHOW T@ ZHD'}, ...
                'Callback', @this.onInsertCommand);
                        
            uicontrol( 'Parent', but_line, ...
                'String', 'ZWD', ...
                'TooltipString', 'Estimated Zenith Wet Delay (ZWD)', ...
                'UserData', {'SHOW T@ ZWD'}, ...
                'Callback', @this.onInsertCommand);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'PWV', ...
                'TooltipString', 'Estimated Precipitable Water Vapour (PWV)', ...
                'UserData', {'SHOW T@ PWV'}, ...
                'Callback', @this.onInsertCommand);

            but_line = uix.HButtonBox('Parent', out_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'ZTD vs Height', ...
                'TooltipString', 'ZTD vs Height (>3 receivers only)', ...
                'UserData', {'SHOW T@ ZTD_VSH'}, ...
                'Callback', @this.onInsertCommand);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'ZWD vs Height', ...
                'TooltipString', 'ZWD vs Height (>3 receivers only)', ...
                'UserData', {'SHOW T@ ZWD_VSH'}, ...
                'Callback', @this.onInsertCommand);

            but_line = uix.HButtonBox('Parent', out_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'ZWD Proc Stats', ...
                'TooltipString', 'Show ZWD processing status', ...
                'UserData', {'SHOW T@ ZWD_STAT'}, ...
                'Callback', @this.onInsertCommand);

            uicontrol( 'Parent', but_line, ...
                'String', 'ZWD Sync', ...
                'TooltipString', 'Show multireceiver ZWD (imagesc)', ...
                'UserData', {'SHOW T@ ZWD_SYNC'}, ...
                'Callback', @this.onInsertCommand);

            but_line = uix.HButtonBox('Parent', out_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'Tropo Gradients', ...
                'TooltipString', 'Show temporal variations of the tropospheric gradient', ...
                'UserData', {'SHOW T@ TGRAD'}, ...
                'Callback', @this.onInsertCommand);

            but_line = uix.HButtonBox('Parent', out_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'Pressure / Temp. / Humidity', ...
                'TooltipString', 'Show Used Pressure, Temperature and Humidity', ...
                'UserData', {'SHOW T@ PTH'}, ...
                'Callback', @this.onInsertCommand);

            eg_box.Heights = [5 -1];
        end
        
        function insertTabPlots3(this, container)
            cmd_bg = Core_UI.LIGHT_GREY_BG;
            tab = uix.HBox('Parent', container, ...
                'Padding', 0, ...
                'BackgroundColor', cmd_bg);
             
            v_left = uix.VBox('Parent', tab, ...
                'Padding', 0, ...
                'BackgroundColor', cmd_bg);
            
            % --------------------------------------------------------
            % COMMAND SUGGESTIOS
            % --------------------------------------------------------
            eg_box = uix.VBox('Parent', v_left);
                        
            % uicontrol('Parent', eg_box, ...
            %     'Style', 'Text', ...
            %     'String', 'Execution examples:', ...
            %     'ForegroundColor', Core_UI.BLACK, ...
            %     'HorizontalAlignment', 'left', ...
            %     'FontSize', Core_UI.getFontSize(9), ...
            %     'BackgroundColor', cmd_bg);            
                        
            Core_UI.insertEmpty(eg_box);
            
            % Work-Space
            % --------------------------------------------------------
            last_sss_pnl = Core_UI.insertPanelLight(eg_box, 'Plots of Residuals');
            workspace_box = uix.VButtonBox('Parent', last_sss_pnl, ...
                'ButtonSize', [340 28] , ...
                'Spacing', 0, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);                        
            
            [~, this.res_source] = Core_UI.insertPopUpLight(workspace_box, 'Residuals source', this.RES_SOURCE, 'res_source', [], [120 -1]);
            [~, this.res_type] = Core_UI.insertPopUpLight(workspace_box, 'Residuals type', this.RES_TYPE, 'res_type', [], [120 -1]);
            
            but_line = uix.HButtonBox('Parent', workspace_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);            
            uicontrol( 'Parent', but_line, ...
                'String', 'Residuals', ...
                'TooltipString', 'Plot residuals in a unique plot', ...
                'UserData', {'SHOW T@ RES_(O|W)_(RTYPE)'}, ...
                'Callback', @this.onInsertCommand);
            uicontrol( 'Parent', but_line, ...
                'String', 'Residuals stats', ...
                'TooltipString', 'Plot of the residuals mean and std satellite by satellite', ...
                'UserData', {'SHOW T@ RES_(O|W)_(RTYPE)_STAT'}, ...
                'Callback', @this.onInsertCommand);                                                
            
            but_line = uix.HButtonBox('Parent', workspace_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            uicontrol( 'Parent', but_line, ...
                'String', 'Res. cartesian plot', ...
                'TooltipString', 'Plot residuals in a unique plot', ...
                'UserData', {'SHOW T@ RES_(O|W)_(RTYPE)_SKY'}, ...
                'Callback', @this.onInsertCommand);
            uicontrol( 'Parent', but_line, ...
                'String', 'Res. polar plot', ...
                'TooltipString', 'Plot residuals separate satellite by satellite', ...
                'UserData', {'SHOW T@ RES_(O|W)_(RTYPE)_SKYP'}, ...
                'Callback', @this.onInsertCommand);            
                        
            Core_UI.insertEmpty(eg_box);

            % Output Multi-rec
            % --------------------------------------------------------
            out_pnl = Core_UI.insertPanelLight(eg_box, 'Base-lines (multi-rec)');
            
            outmr_box = uix.VButtonBox('Parent', out_pnl, ...
                'ButtonSize', [340 28] , ...
                'Spacing', 0, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            but_line = uix.VButtonBox('Parent', outmr_box, ...
                'ButtonSize', [340 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            v_but = uix.VBox('Parent', but_line, ...
                'Padding', 0, ...
                'BackgroundColor', cmd_bg);
            Core_UI.insertEmpty(v_but);
            h_but = uix.HBox('Parent', v_but, ...
                'Padding', 0, ...
                'BackgroundColor', cmd_bg);
            Core_UI.insertEmpty(h_but);
            [~, this.bsl_type] = Core_UI.insertPopUpLight(h_but, 'Coordinates type', this.COO_TYPE, 'bsl_type', [], [120 -1]);
            this.bsl_type.Value = 2;
            h_but.Widths = [5 -1];
            v_but.Heights = [4 -1];
            
            but_line = uix.HButtonBox('Parent', outmr_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'Baselines stability ENU', ...
                'TooltipString', 'Position stability of a receiver vs. a reference', ...
                'UserData', {'SHOW T@ (REF_REC) ENUBSL --ctype=(BTYPE)'}, ...
                'Callback', @this.onInsertCommand);

            but_sub_line = uix.HBox('Parent', but_line, ...
                'BackgroundColor', cmd_bg);
            
            v_align = uix.VBox('Parent', but_sub_line, ...
                'BackgroundColor', cmd_bg);
            
            Core_UI.insertEmpty(v_align);
            
            uicontrol('Parent', v_align, ...
                'Style', 'Text', ...
                'String', 'Ids:', ...
                'ForegroundColor', Core_UI.BLACK, ...
                'HorizontalAlignment', 'left', ...
                'FontSize', Core_UI.getFontSize(8), ...
                'BackgroundColor', cmd_bg);          
            
            v_align.Heights = [4 -1];
            
            this.bsl_ref_ids = uicontrol('Parent', but_sub_line, ...
                'Style', 'edit', ...
                'String', 'auto', ...
                'TooltipString', 'Insert receivers ids', ...
                'FontName', 'Courier New', ...
                'FontWeight', 'bold', ...
                'HorizontalAlignment', 'center', ...
                'Callback', @this.onInsertCommand);
            
            but_sub_line.Widths = [30, -1];
            
            but_line = uix.HButtonBox('Parent', outmr_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'Baselines Stability Planar Up', ...
                'TooltipString', 'Position stability of a receiver vs. a reference', ...
                'UserData', {'SHOW T@ (REF_REC) PUPBSL --ctype=(BTYPE)'}, ...
                'Callback', @this.onInsertCommand);
            
            Core_UI.insertEmpty(eg_box);
            
            % Validation
            % --------------------------------------------------------
            val_pnl = Core_UI.insertPanelLight(eg_box, 'Validation');
            val_box = uix.VButtonBox('Parent', val_pnl, ...
                'ButtonSize', [340 28] , ...
                'Spacing', 0, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            but_line = uix.HButtonBox('Parent', val_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
             
            uicontrol( 'Parent', but_line, ...
                'String', 'Validate Results with IGS', ...
                'TooltipString', 'Compute statistics of the comparison between goGPS and IGS official combined results', ...
                'UserData', {'VALIDATE T@ IGS'}, ...
                'Callback', @this.onInsertCommand);                
             
%             but_line = uix.HButtonBox('Parent', val_box, ...
%                 'ButtonSize', [165 28] , ...
%                 'Spacing', 5, ...
%                 'HorizontalAlignment', 'left', ...
%                 'VerticalAlignment', 'top', ...
%                 'BackgroundColor', cmd_bg);
%             
%             uicontrol( 'Parent', but_line, ...
%                 'String', 'Check position with IGS', ...
%                 'TooltipString', 'Check position of an IGS station as estimated from goGPS vs IGS', ...
%                 'UserData', {'VALIDATE T@ IGS_POS'}, ...
%                 'Callback', @this.onInsertCommand);
                        
            uicontrol( 'Parent', but_line, ...
                'String', 'Validate Tropo with IGS', ...
                'TooltipString', 'Check ZTD and Gradients of an IGS station as estimated from goGPS vs IGS', ...
                'UserData', {'VALIDATE T@ IGS_ZTD'}, ...
                'Callback', @this.onInsertCommand);    
            
            but_line = uix.HButtonBox('Parent', val_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'Validate ZTD with Radiosondes', ...
                'TooltipString', 'Plot ZTD of the closest rec + interpolated val on radiosonde location + radiosonde ZTD', ...
                'UserData', {'VALIDATE T@ RAOB'}, ...
                'Callback', @this.onInsertCommand);
            
            Core_UI.insertEmpty(eg_box);

            % Multi-path
            % --------------------------------------------------------
            
            mp_pnl = Core_UI.insertPanelLight(eg_box, 'MultiPath');
            mp_box = uix.VButtonBox('Parent', mp_pnl, ...
                'ButtonSize', [340 28] , ...
                'Spacing', 0, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
                         
            but_line = uix.HButtonBox('Parent', mp_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'BackgroundColor', cmd_bg);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'Multipath Map', ...
                'TooltipString', 'Display the multipath maps obtained from the residuals', ...
                'UserData', {'SHOW T@ MP(MPTYPE)'}, ...
                'Callback', @this.onInsertCommand);                
                         
            this.mp_type = uicontrol('Parent', but_line,...
                'Style', 'popup',...
                'UserData', 'flag_rec_mp',...
                'String', Core.getCurrentSettings.FLAG_REC_MP_LABEL(2:end));

            % --------------------------------------------------------
            
            %scroller = uix.ScrollingPanel('Parent', eg_box);
            %container = uix.Grid('Parent', scroller, ...
            %    'BackgroundColor', Core_UI.LIGHT_GREY_BG);

            eg_box.Heights = [5, 170, 5, 112, 5, 84, 5, -1];
        end

        function insertTabMaps(this, container)
            cmd_bg = Core_UI.LIGHT_GREY_BG;
            tab = uix.HBox('Parent', container, ...
                'Padding', 0, ...
                'BackgroundColor', cmd_bg);
             
            v_left = uix.VBox('Parent', tab, ...
                'Padding', 0, ...
                'BackgroundColor', cmd_bg);
            
            % --------------------------------------------------------
            % COMMAND SUGGESTIOS
            % --------------------------------------------------------
            eg_box = uix.VBox('Parent', v_left);
                        
            % uicontrol('Parent', eg_box, ...
            %     'Style', 'Text', ...
            %     'String', 'Execution examples:', ...
            %     'ForegroundColor', Core_UI.BLACK, ...
            %     'HorizontalAlignment', 'left', ...
            %     'FontSize', Core_UI.getFontSize(9), ...
            %     'BackgroundColor', cmd_bg);                        
                        
            Core_UI.insertEmpty(eg_box);            
            
            % Output
            % --------------------------------------------------------
            
            out_pnl = Core_UI.insertPanelLight(eg_box, 'Static Maps');
            out_box = uix.VButtonBox('Parent', out_pnl, ...
                'ButtonSize', [340 28] , ...
                'Spacing', 0, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
                                                
            uicontrol( 'Parent', out_box, ...
                'String', 'Map of GNSS stations (satellite image background) + Radiosondes', ...
                'TooltipString', 'Map projection overlayed on Google Satellite images + close Radiosondes locations', ...
                'UserData', {'SHOW T@ G_MAP_R'}, ...
                'Callback', @this.onInsertCommand);
            
            uicontrol( 'Parent', out_box, ...
                'String', 'Map of GNSS stations (DTM background) + Radiosondes', ...
                'TooltipString', 'Map projection overlayed on automatically downloaded DTM images + close Radiosondes locations', ...
                'UserData', {'SHOW T@ DTM_MAP_R'}, ...
                'Callback', @this.onInsertCommand);                        

            uicontrol( 'Parent', out_box, ...
                'String', 'Map of GNSS stations (satellite image background)', ...
                'TooltipString', 'Map projection overlayed on Google Satellite images', ...
                'UserData', {'SHOW T@ MAP'}, ...
                'Callback', @this.onInsertCommand);
            
            uicontrol( 'Parent', out_box, ...
                'String', 'Map of GNSS stations (DTM background)', ...
                'TooltipString', 'Map projection overlayed on automatically downloaded DTM images', ...
                'UserData', {'SHOW T@ DTM_MAP'}, ...
                'Callback', @this.onInsertCommand);                        

            uicontrol( 'Parent', out_box, ...
                'String', 'Browsable map of GNSS stations (satellite image background)', ...
                'TooltipString', 'Browsable map (not projected) overlayed on Google Satellite images', ...
                'UserData', {'SHOW T@ L_MAP'}, ...
                'Callback', @this.onInsertCommand);
                        
            % --------------------------------------------------------
            
            %scroller = uix.ScrollingPanel('Parent', eg_box);
            %container = uix.Grid('Parent', scroller, ...
            %    'BackgroundColor', Core_UI.LIGHT_GREY_BG);

            eg_box.Heights = [5, -1];
        end
        
        function insertTabExport(this, container)
            cmd_bg = Core_UI.LIGHT_GREY_BG;
            tab = uix.HBox('Parent', container, ...
                'Padding', 0, ...
                'BackgroundColor', cmd_bg);
             
            v_left = uix.VBox('Parent', tab, ...
                'Padding', 0, ...
                'BackgroundColor', cmd_bg);
            
            % --------------------------------------------------------
            % COMMAND SUGGESTIOS
            % --------------------------------------------------------
            eg_box = uix.VBox('Parent', v_left);
                        
            Core_UI.insertEmpty(eg_box);            
            
            % Global Export
            % --------------------------------------------------------
            
            out_pnl = Core_UI.insertPanelLight(eg_box, 'Global Export');
            out_box = uix.VButtonBox('Parent', out_pnl, ...
                'ButtonSize', [340 28] , ...
                'Spacing', 0, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
                        
            uicontrol( 'Parent', out_box, ...
                'String', 'Current goGPS core (main state object)', ...
                'TooltipString', 'Export a unique MATLAB file containing the snapshot of the current computation', ...
                'UserData', {'EXPORT CORE_MAT'}, ...
                'Callback', @this.onInsertCommand);

            uicontrol( 'Parent', out_box, ...
                'String', 'Receiver results (as struct stored in a MAT file)', ...
                'TooltipString', 'Export a unique MATLAB file containing the results of the current computation', ...
                'UserData', {'EXPORT T@ PLAIN_MAT'}, ...
                'Callback', @this.onInsertCommand);
            
            uicontrol( 'Parent', out_box, ...
                'String', 'Receiver median Coordinates (as plain text CRD file)', ...
                'TooltipString', 'Export a CRD file containing the median position of the receivers', ...
                'UserData', {'EXPORT T@ COO_CRD'}, ...
                'Callback', @this.onInsertCommand);

            Core_UI.insertEmpty(eg_box);            
            
            % Receiver Specific
            % --------------------------------------------------------
            
            out_pnl = Core_UI.insertPanelLight(eg_box, 'Receiver Specific Export');
            out_box = uix.VButtonBox('Parent', out_pnl, ...
                'ButtonSize', [340 28] , ...
                'Spacing', 0, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);                        

            uicontrol( 'Parent', out_box, ...
                'String', 'Receiver RINEX3 of the last session', ...
                'TooltipString', 'Export the Receiver Observations as RINEX3 (they need to be still stored in Work-Space))', ...
                'UserData', {'EXPORT T@ REC_RIN'}, ...
                'Callback', @this.onInsertCommand);

            uicontrol( 'Parent', out_box, ...
                'String', 'Receiver object (as MAT)', ...
                'TooltipString', 'Export a MATLAB file for each receiver containing the entire Receiver object', ...
                'UserData', {'EXPORT T@ REC_MAT'}, ...
                'Callback', @this.onInsertCommand);                                 
            
            but_line = uix.HButtonBox('Parent', out_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'XYZ Coordinates', ...
                'TooltipString', 'Export a TXT file containing the stored XYZ coordinates', ...
                'UserData', {'EXPORT T@ XYZ_TXT'}, ...
                'Callback', @this.onInsertCommand);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'ENU Coordinates', ...
                'TooltipString', 'Export a TXT file containing the stored ENU coordinates', ...
                'UserData', {'EXPORT T@ ENU_TXT'}, ...
                'Callback', @this.onInsertCommand);

            but_line = uix.HButtonBox('Parent', out_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);

            uicontrol( 'Parent', but_line, ...
                'String', 'Geodetic Coordinates', ...
                'TooltipString', 'Export a TXT file containing the stored Geodetic coordinates', ...
                'UserData', {'EXPORT T@ GEO_TXT'}, ...
                'Callback', @this.onInsertCommand);

            %uicontrol( 'Parent', out_box, ...
            %    'String', 'Receiver Coordinates (as CSV)', ...
            %    'TooltipString', 'Export a CSV file containing the coordinates estimated for the receivers', ...
            %    'UserData', {'EXPORT T@ COO_CSV'}, ...
            %    'Callback', @this.onInsertCommand);                        

            but_line = uix.HButtonBox('Parent', out_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'Troposphere (as CSV)', ...
                'TooltipString', 'Export a CSV file containing the estimated troposphere delays for the receivers', ...
                'UserData', {'EXPORT T@ TRP_CSV'}, ...
                'Callback', @this.onInsertCommand);                        

            uicontrol( 'Parent', but_line, ...
                'String', 'Troposphere (as SINEX)', ...
                'TooltipString', 'Export a SINEX file containing the estimated troposphere delays for the receivers', ...
                'UserData', {'EXPORT T@ TRP_SNX'}, ...
                'Callback', @this.onInsertCommand);
            
            but_line = uix.HButtonBox('Parent', out_box, ...
                'ButtonSize', [165 28] , ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'top', ...
                'BackgroundColor', cmd_bg);
            
            uicontrol( 'Parent', but_line, ...
                'String', 'Troposphere (as MAT)', ...
                'TooltipString', 'Export a MAT file containing the estimated troposphere delays for the receivers', ...
                'UserData', {'EXPORT T@ TRP_MAT'}, ...
                'Callback', @this.onInsertCommand);
                        
            uicontrol( 'Parent', but_line, ...
                'String', 'Troposphere (as HN)', ...
                'TooltipString', 'Export a HydroNet file containing the estimated troposphere delays for the receivers', ...
                'UserData', {'EXPORT T@ TRP_HN'}, ...
                'Callback', @this.onInsertCommand);

            % --------------------------------------------------------
            
            %scroller = uix.ScrollingPanel('Parent', eg_box);
            %container = uix.Grid('Parent', scroller, ...
            %    'BackgroundColor', Core_UI.LIGHT_GREY_BG);

            eg_box.Heights = [5, 110, 5, -1];
        end
        
        function j_cmd = insertCommandEditor(this, container)
            % COMMAND LIST EDITOR
            % --------------------------------------------------------
                        
            cmd_bg = Core_UI.LIGHT_GREY_BG;
            
            cmd_tab = uix.VBox('Parent', container, ...
                'Padding', 0, ...
                'BackgroundColor', cmd_bg);

            top_bh = uix.HBox('Parent', cmd_tab, ...
                'Padding', 0, ...
                'BackgroundColor', cmd_bg);
            
            cmd_box = uix.VBox('Parent', top_bh, ...
                'Padding', 0, ...
                'BackgroundColor', cmd_bg);
            
            
            
            this.flag_auto_exec = uicontrol('Parent', cmd_box,...
                'Style', 'checkbox',...
                'BackgroundColor', Core_UI.LIGHT_GREY_BG, ...
                'FontSize', Core_UI.getFontSize(9), ...
                'Value', true, ...
                'String', 'Immediate execution');            
            
            export_box = uix.HBox('Parent', cmd_box, ...
                'Padding', 0, ...
                'BackgroundColor', cmd_bg);
            
            this.flag_auto_export = uicontrol('Parent', export_box,...
                'Style', 'checkbox',...
                'BackgroundColor', Core_UI.LIGHT_GREY_BG, ...
                'FontSize', Core_UI.getFontSize(9), ...
                'String', 'Automatic plot export');
            
            this.flag_auto_close = uicontrol('Parent', export_box,...
                'Style', 'checkbox',...
                'BackgroundColor', Core_UI.LIGHT_GREY_BG, ...
                'FontSize', Core_UI.getFontSize(9), ...
                'String', 'Close after export');
            
            Core_UI.insertEmpty(cmd_box);
            
            uicontrol('Parent', cmd_box, ...
                'Style', 'Text', ...
                'String', 'Insert here the goGPS command list:', ...
                'FontWeight', 'normal', ...
                'ForegroundColor', Core_UI.BLACK, ...
                'HorizontalAlignment', 'left', ...
                'FontSize', Core_UI.getFontSize(9), ...
                'BackgroundColor', cmd_bg);

            list_but = uix.VButtonBox( 'Parent', top_bh, ...
                'ButtonSize', [100 28] , ...
                'VerticalAlignment', 'top', ...
                'HorizontalAlignment', 'right', ...
                'BackgroundColor', Core_UI.LIGHT_GREY_BG);
            
            top_bh.Widths = [-1 100];
            dock_fig_but = uicontrol( 'Parent', list_but, ...
                'String', 'Dock Figures', ...
                'Callback', @this.onDockAll); %#ok<NASGU>
            dock_fig_but = uicontrol( 'Parent', list_but, ...
                'String', 'Close Figures', ...
                'Callback', @this.onCloseAll); %#ok<NASGU>

            j_cmd = com.mathworks.widgets.SyntaxTextPane;
            codeType = j_cmd.M_MIME_TYPE;  % j_settings.contentType='text/m-MATLAB'
            j_cmd.setContentType(codeType);
            str = '';
            j_cmd.setText(str);
            % Create the ScrollPanel containing the widget
            j_scroll_settings = com.mathworks.mwswing.MJScrollPane(j_cmd);
            % Inject edit box with the Java Scroll Pane into the main_window
            %% DEPRECATE!!!
            warning off
            [panel_j, panel_h] = javacomponent(j_scroll_settings, [1 1 1 1], cmd_tab);
            warning on        
            % HELP
            Core_UI.insertEmpty(cmd_tab, cmd_bg);
            
            list_but = uix.HButtonBox( 'Parent', cmd_tab, ...
                'Spacing', 5, ...
                'HorizontalAlignment', 'right', ...
                'ButtonSize', [120 28] , ...
                'BackgroundColor', cmd_bg);
                        
            help = uicontrol( 'Parent', list_but, ...
                'String', 'HELP', ...
                'Callback', @this.onOpenCommandHelp);
            clr = uicontrol( 'Parent', list_but, ...
                'String', 'Clear', ...
                'Callback', @this.onClearCommands);
            check = uicontrol( 'Parent', list_but, ...
                'String', 'Check validity', ...
                'Callback', @this.onCheckValidity);
            exec = uicontrol( 'Parent', list_but, ...
                'String', 'EXEC', ...
                'Callback', @this.exec);
            
            cmd_box.Heights = [Core_UI.LINE_HEIGHT, Core_UI.LINE_HEIGHT, 5, Core_UI.LINE_HEIGHT];
            cmd_tab.Heights = [3*Core_UI.LINE_HEIGHT + 5, -1, 2, 30];
        
            % --------------------------------------------------------
        end
    end
    %% METHODS setters
    % ==================================================================================================================================================
    methods
        function startWaiting(this)
            this.j_spinner.start;
            this.j_spinner.setBusyText('Running...');
            this.top_bh.Widths(3) = 120;
            drawnow
        end
        
        function stopWaiting(this)
            this.j_spinner.stop;
            this.j_spinner.setBusyText('All done!');
            this.top_bh.Widths(3) = 0;
            drawnow
        end
        
        
        function addMessage(this, text, type)
            % Add a message to the logger
            % 
            % INPUT
            %   text    text in HTML format
            %   type    'm'     marked message
            %           'w'     warning message
            %           'e'     error message
            %           otherwise normal
            %
            % SYNTAX
            %   this.addHTML(text, type)
            
            if nargin < 3 || isempty(type)
                type = 'n';
            end
            Core_UI.guiAddMessage(this.jedt, text, type);
        end
        
        function addHTML(this, html_txt)
            % Add a message to the logger
            % 
            % INPUT
            %   html_txt    text in HTML format
            %
            % SYNTAX
            %   this.addHTML(html_txt)

            
            Core_UI.guiAddHTML(this.jedt, html_txt);
        end
        
        function updateRecList(this)
            % Update rec table
            core = Core.getCurrentCore;
            this.rec_tbl.Data = cell(numel(core.rec), 4);
            tmp = cell(numel(core.rec), 4);
            for r = 1 : numel(core.rec)
                name = core.rec(r).getMarkerName4Ch;
                if core.rec(r).isEmpty()
                    col = '#AAAAAA'; % Grey
                    col_ss = col;
                else
                    col = '#6666FF'; % Light Blue
                    col_ss = '#444444'; % Dark Blue
                end
                tmp{r,1} = ~core.rec(r).isEmpty();
                tmp{r,2} = sprintf('%s style="font-weight: bold; font-size: 9px; color: %s; ">%d', '<html><tr><td width=9999 align=center ', col, r);
                tmp{r,3} = sprintf('%s style="font-weight: bold; font-size: 9px; color: %s; ">%s', '<html><tr><td width=9999 align=center ', col, upper(name(1:4)));
                tmp{r,4} = sprintf('%s style="font-weight: bold; font-size: 9px; color: %s; ">%s', '<html><tr><td width=9999 align=center ', col_ss, core.rec(r).getActiveSys());
            end
            this.rec_tbl.Data = tmp;
        end
        
        function updateUI(this)
            state = Core.getState();
            for i = 1 : length(this.edit_texts)
                value = state.getProperty(this.edit_texts{i}.UserData);
                if ~isempty(value)
                    this.edit_texts{i}.String = value;
                end
            end
            
            this.updateFlagList();
            if exist(Core.getState.getOutDir, 'dir') ~= 7
                msgbox('The output folder is not valid', 'Warning','warn');
            end            
        end
        
        function updateFlagList(this)
            Core_UI.checkFlag(this.flag_list)
        end               

        function cleaned_cmd_list = checkCommands(this)
            % Check Commands
            cleaned_cmd_list = {};
            if isempty(strrep(char(this.j_cmd.getText()),'"', ''''))
                this.j_cmd.setText('% Write here the commands to be executed');
            else
                full_cmd_list = textscan(strrep(strrep(char(this.j_cmd.getText()),'"', ''''),'%','#'),'%s','Delimiter', '\n');
                cmd = Core.getCommandInterpreter();
                if ~isempty(full_cmd_list)
                    [cleaned_cmd_list, err_list, loop_lev] = cmd.fastCheck(full_cmd_list{1});
                    cmd_list{1} = cleaned_cmd_list;
                    loop_lev = loop_lev - (diff([0 loop_lev]) > 0);
                    
                    cid = 0; % index running on valid commands
                    for c = 1 : numel(full_cmd_list{1})
                        cid = cid + ~err_list(c);
                        
                        cur_cmd = full_cmd_list{1}{c};
                        if (length(cur_cmd) > 1) && (cur_cmd(1) ~= '#') && err_list(c)
                            cur_cmd = ['# ' cur_cmd ' - ERROR: CMD UNKNOWN']; %#ok<AGROW>
                            full_cmd_list{1}{c} = cur_cmd;
                        elseif ~err_list(c)
                            full_cmd_list{1}{c} = sprintf('%s%s', char(32 * ones(1,3 * loop_lev(cid))), strtrim(cleaned_cmd_list{cid}));
                        end
                    end
                    str = strrep(strCell2Str(full_cmd_list{1}, 10),'#','%');
                    this.j_cmd.setText(strrep(strrep(str, Command_Interpreter.SUB_KEY, ' '), '''', '"'));
                end
                cleaned_cmd_list = full_cmd_list{1};
            end
            Core.getLogger.addMarkedMessage('The command validity has been checked');
        end

        function trg_list = getTargetList(this)
            % Get the target list from the Receiver list checked boxes
            %
            % SYNTAX
            %   trg_list = this.getTargetList()
            
            trg = [this.rec_tbl.Data{:,1}];
            trg_list = '';
            if all(trg)
                trg_list = 'T*';
            elseif any(trg)
                trg = sprintf('%d,', find(trg));
                trg_list = ['T', trg(1:end-1)];
            end
        end
        
        function ref_list = getRefList(this, ref_lid)
            % Get the reference list from the Receiver reference box
            %
            % SYNTAX
            %   ref_list = this.getRefList(handle))
            
            rec_id = ref_lid;
            ref_list = '';
            if all(rec_id)
                ref_list = 'R*';
            elseif any(rec_id)
                rec_id = sprintf('%d,', find(rec_id));
                ref_list = ['R', rec_id(1:end-1)];
            end
        end
    end
    
    %% METHODS EVENTS
    % ==================================================================================================================================================
    methods (Access = public)                 
        function onSelectAll(this, caller, event)
            % Select all the receivers
            id_ok = find(~Core.getCurrentCore.rec.isEmpty_mr)';
            for r = id_ok
                this.rec_tbl.Data{r,1} = true;
            end
        end
        
        function onLoadCore(this, caller, event)
            % Load state settings
            this.startWaiting();
            
            if ~exist('core', 'var')
                addPathGoGPS;
            end
            core_dir = Core.getState.getOutDir();
            
            [file_name, path_name] = uigetfile({'*.mat;','goGPS core from previous session (*.mat)';}, 'Choose file with saved core', core_dir);
            
            if path_name ~= 0 % if the user pressed cancelled, then we exit this callback
                % get the extension (mat/ini):
                [~, ~, ext] = fileparts(file_name);
                
                % build the path name of the file to be loaded
                core_file = fullfile(path_name, file_name);
                if strcmp(ext, '.mat')
                    Core.getLogger.addMarkedMessage(sprintf('Start loading core from "%s"', core_file));
                    load(core_file);
                    if ~exist('core', 'var')
                        Core.getLogger.addError(sprintf('No core variable found in file', core_file));
                    else
                        core.setCurrentCore(core);
                        this.init();
                        Core.getLogger.addStatusOk(sprintf('Core successifully loaded', core_file));
                    
                        rec = core.rec;
                        assignin('base', 'core', core);
                        assignin('base', 'rec', rec);
                        
                        log = Core.getLogger();
                        log.addMarkedMessage('Now you should be able to see 2 new variables:');
                        log.addMessage(log.indent(' - core      the core processor object containing all the goGPS structures'));
                        log.addMessage(log.indent(' - rec       the array of Receivers'));
                        log.newLine();
                    end
                else
                    Core.getLogger.addError('Unrecognized input file format!');
                end
            end
            this.stopWaiting();
        end
        
        function onDockAll(this, caller, event)
            % Dock all the figures but goGPS main windows
            dockAllFigures
        end
        
        function onCloseAll(this, caller, event)
            % Close all the figures but goGPS main windows
            closeAllFigures
        end
        
        function onRunGoGPS(this, caller, event)
            % Run goGPS
            goGPS(Core.getState);
        end
        
        function onEditSettings(this, caller, event)
            % Run Edit Settings
            goEditSettings
        end        
        
        function onUnselectAll(this, caller, event)
            % Select all the receivers
            for r = 1 : size(this.rec_tbl.Data, 1)
                this.rec_tbl.Data{r,1} = false;
            end
        end
        
        function onUpdateRecList(this, caller, event)
            % Update receiver list
            this.updateRecList();
        end
        
        function onTabChange(this, caller, event)
        end
        
        function onOpenCommandHelp(this, caller, event)
            % Open Help Window
            GUI_Command_Help;
        end

        function onCheckValidity(this, caller, event)
            % Check Validity of the command window
            this.checkCommands();
        end
        
        function onClearCommands(this, caller, event)
            % Clear the command window
            this.j_cmd.setText('');
            this.checkCommands();
        end
        
        function exec(this, caller, event)
            this.startWaiting();
            cleaned_cmd_list = this.checkCommands();
            if ~isempty(cleaned_cmd_list)
                Core.getCurrentCore.exec(cleaned_cmd_list);
            end
            this.stopWaiting();
        end
                
        function onInsertCommand(this, caller, event)
            cmd_list = {};
            txt = strrep(char(this.j_cmd.getText()),'"', '''');
            if ~isempty(txt)
                cmd_list = textscan(strrep(txt, '%', '#'), '%s', 'Delimiter', '\n');
                cmd_list = cmd_list{1};
            end
                        
            new_cmd = strrep(caller.UserData(:), 'T@', this.getTargetList());
            % Manage Coordinate type
            if this.coo_type.Value == 1 % CODE
                new_cmd = strrep(new_cmd, '(CTYPE)', '-1');
            elseif this.coo_type.Value == 2 % PR
                new_cmd = strrep(new_cmd, '(CTYPE)', '0');
            elseif this.coo_type.Value == 3 % PR
                new_cmd = strrep(new_cmd, '(CTYPE)', '1');
            elseif this.coo_type.Value == 4 % PH
                new_cmd = strrep(new_cmd, '(CTYPE)', '2');
            elseif this.coo_type.Value == 5 % PH
                new_cmd = strrep(new_cmd, '(CTYPE)', '3');
            end

            % Manage Baseline Coordinate type
            if this.bsl_type.Value == 1 % CODE
                new_cmd = strrep(new_cmd, '(BTYPE)', '-1');
            elseif this.bsl_type.Value == 2 % PR
                new_cmd = strrep(new_cmd, '(BTYPE)', '0');
            elseif this.bsl_type.Value == 3 % PR
                new_cmd = strrep(new_cmd, '(BTYPE)', '1');
            elseif this.bsl_type.Value == 4 % PH
                new_cmd = strrep(new_cmd, '(BTYPE)', '2');
            elseif this.bsl_type.Value == 5 % PH
                new_cmd = strrep(new_cmd, '(BTYPE)', '3');
            end
            
            % Manage multipath type
            new_cmd = strrep(new_cmd, '(MPTYPE)', num2str(this.mp_type.Value));

            % Manage Residuals pop-up menus
            if this.res_source.Value == 1 % WORK
                new_cmd = strrep(new_cmd, '(O|W)', 'W');
            elseif this.res_source.Value == 2 % OUT
                new_cmd = strrep(new_cmd, '(O|W)', 'O');                
            end
            if this.res_type.Value == 1 % PH
                new_cmd = strrep(new_cmd, '(RTYPE)', 'PR');
            elseif this.res_type.Value == 2 % PR
                new_cmd = strrep(new_cmd, '(RTYPE)', 'PH');                
            end
            
            % Manage Baseline Ref rec    
            if ~isempty(new_cmd) && instr(new_cmd, '(REF_REC)')
                % Get the list of rec
                rec = Core.getCurrentCore.rec;
                [id_ref, id_found] = Core.getCommandInterpreter.getMatchingRec(rec, {[ 'R' strrep(strrep(this.bsl_ref_ids.String,'R', ''), ' ', '')]}, 'R');
                if id_found
                    % convert id to logical (needed by getRefList)
                    lid = false(1, numel(rec)); lid(id_ref) = true;
                    r_list = this.getRefList(lid);
                else
                    r_list = '';
                end
                
                new_cmd = strrep(new_cmd, '(REF_REC)', r_list);
            end
            
            % Eventually add export
            for l = 1 : numel(new_cmd)
                if strcmp(new_cmd{l}(1:4), 'SHOW')
                    if this.flag_auto_export.Value
                        new_cmd{l} = [new_cmd{l} ' -e=".png"'];
                    end
                    if this.flag_auto_close.Value
                        new_cmd{l} = [new_cmd{l} ' -c'];
                    end
                end
            end
            cmd_list = [cmd_list; new_cmd];
            str = strrep(strCell2Str(cmd_list, 10),'#','%');
            this.j_cmd.setText(strrep(strrep(str, Command_Interpreter.SUB_KEY, ' '), '''', '"'));
            this.checkCommands();
            
            % If immediate execution is required            
            if this.flag_auto_exec.Value
                this.startWaiting();
                core = Core.getCurrentCore();
                cmd = core.getCommandInterpreter();
                core.exec(cmd.fastCheck(new_cmd));
                this.stopWaiting();
            end            
        end
        
        function onEditChange(this, caller, event)
            % Manage edit box change events
            state = Core.getState;
            prop = state.getProperty(caller.UserData);
            if ~isnumeric(prop)
                state.setProperty(caller.UserData, caller.String);
            else
                state.setProperty(caller.UserData, str2num(caller.String));
            end
            
            state.check();
            caller.String = state.getProperty(caller.UserData);            
            this.updateFlagList();
        end
    end
end
